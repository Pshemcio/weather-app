{"version":3,"sources":["logo.svg","Input.js","Current.js","Day.js","Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","className","onSubmit","checkForm","type","name","placeholder","onChange","cityName","icon","Current","data","currentData","description","weather","city","temp","main","toFixed","humidity","pressure","feelsLike","feels_like","wind","speed","sunrise","sys","sunset","iconUrl","format_time","daytime","Date","getTimezoneOffset","toISOString","replace","slice","string","desc","charAt","toUpperCase","a","dt","day","getDay","month","getMonth","getDate","date","src","alt","Day","logo","Forecast","forecastData","console","log","library","add","faSearch","App","useState","setCity","setData","useEffect","sectionsToHide","document","querySelectorAll","setTimeout","forEach","section","style","opacity","test","e","target","value","preventDefault","Axios","get","then","response","querySelector","textContent","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.584933da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport './Input.css'\r\n\r\nconst Input = props => {\r\n\r\n    return (\r\n        <section className=\"city-input\">\r\n            <form onSubmit={props.checkForm}>\r\n                <div className='input-wrap'>\r\n                    <input type=\"text\" name=\"name\" placeholder='Wpisz nazwę miasta!' onChange={props.cityName} />\r\n                    <button type=\"submit\"><FontAwesomeIcon icon=\"search\" /></button>\r\n                </div>\r\n                <p className='error-msg'></p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Current.css'\r\n\r\nfunction Current(props) {\r\n    const data = props.currentData.data;\r\n    const description = data.weather[0].description\r\n    const city = data.name;\r\n    const temp = data.main.temp.toFixed();\r\n    const humidity = data.main.humidity;\r\n    const pressure = data.main.pressure;\r\n    const feelsLike = data.main.feels_like.toFixed();\r\n    const wind = (data.wind.speed * 3.6).toFixed(1);\r\n    const sunrise = data.sys.sunrise;\r\n    const sunset = data.sys.sunset;\r\n    const icon = data.weather[0].icon;\r\n    const iconUrl = 'http://openweathermap.org/img/wn/' + icon + '@2x.png';\r\n\r\n    function format_time(daytime) {\r\n        const time = new Date((daytime * 1000) - (new Date().getTimezoneOffset() * 60000)).toISOString().replace(/T/, ' ').replace(/\\..+/, '').slice(11, -3);\r\n\r\n        return time;\r\n    };\r\n\r\n    const date = () => {\r\n        const a = new Date((data.dt * 1000) - (new Date().getTimezoneOffset() * 60000));\r\n\r\n\r\n        const days = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota']\r\n\r\n        const months = ['Stycznia', 'Lutego', 'Marca', 'Kwietnia', 'Maja', 'Czerwca', 'Lipca', 'Sierpnia', 'Września', 'Października', 'Listopada', 'Grudnia'];\r\n\r\n        const day = days[a.getDay()];\r\n        const month = months[a.getMonth()];\r\n        const time = `${day} ${a.getDate()} ${month}`;\r\n        return time;\r\n    };\r\n\r\n    const capitalizeFirstLetter = string => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    const desc = capitalizeFirstLetter(description);\r\n\r\n    return (\r\n        <section className=\"current-forecast hide\">\r\n            <div className=\"city\">\r\n                <h2>{city}</h2>\r\n                <p>{date()}</p>\r\n            </div>\r\n            <div className=\"current-temp\">\r\n                <div className=\"icon\">\r\n                    <img src={iconUrl} alt=\"lorem\"></img>\r\n                </div>\r\n                <div className=\"info\">\r\n                    <h2>{temp}°C</h2>\r\n                    <p>{desc}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"current-others\">\r\n                <div className=\"rain\">\r\n                    <h3>{feelsLike}°C</h3>\r\n                    <p>Odczuwalna temperatura</p>\r\n                </div>\r\n                <div className=\"wind\">\r\n                    <h3>{wind}km/h</h3>\r\n                    <p>Prędkość wiatru</p>\r\n                </div>\r\n                <div className=\"sunrise\">\r\n                    <h3>{format_time(sunrise)}</h3>\r\n                    <p>Wschód</p>\r\n                </div>\r\n                <div className=\"pressure\">\r\n                    <h3>{pressure}hPa</h3>\r\n                    <p>Ciśnienie</p>\r\n                </div>\r\n                <div className=\"humidity\">\r\n                    <h3>{humidity}%</h3>\r\n                    <p>Wilgotność</p>\r\n                </div>\r\n                <div className=\"sunset\">\r\n                    <h3>{format_time(sunset)}</h3>\r\n                    <p>Zachód</p>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nexport default Current;","import React from 'react'\r\nimport './Forecast.css'\r\nimport logo from './logo.svg';\r\n\r\n\r\nconst Day = (props) => {\r\n    return (\r\n        <div className='day'>\r\n            <h4>\r\n                {props.day}\r\n            </h4>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>5°</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Day;","import React from 'react'\r\nimport './Forecast.css'\r\nimport Day from './Day'\r\nconst Forecast = (props) => {\r\n\r\n    const data = props.forecastData.data;\r\n    console.log(data)\r\n\r\n\r\n    return (\r\n        <section className=\"forecast hide\">\r\n            <Day day='poniedziałek' />\r\n            <Day day='wtorek' />\r\n            <Day day='środa' />\r\n            <Day day='czwartek' />\r\n            <Day day='piątek' />\r\n            <Day day='sobota' />\r\n            <Day day='niedziela' />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Forecast;","import logo from './logo.svg';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport Input from './Input'\nimport Current from './Current.js'\nimport Forecast from './Forecast';\nimport { useEffect, useState } from 'react';\nimport Axios from 'axios';\n\nlibrary.add(faSearch);\n\nfunction App() {\n\n  // FUNKCJONALNOŚĆ WSĘPNEJ GEOLOKACJI, ZRÓB PO WSZYSTKIM !!!\n\n  // const [entryCoordinates, setEntryCoordinates] = useState();\n\n  // const konik = () => {\n\n  //   if (\"geolocation\" in navigator) {\n  //     navigator.geolocation.getCurrentPosition(function (position) {\n  //       lat = position.coords.latitude;\n  //       lon = position.coords.longitude;\n  //       console.log(lat)\n  //       console.log(lon)\n  //     });\n  //   };\n  // };\n  // konik();\n\n  // Axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=9be7b6be531d338240881e6f673303aa&units=metric&lang=pl`)\n  //   .then(function (response) {\n  //     // handle success\n  //     // console.log(response);\n  //     setData(response);\n  //   })\n  //   .catch(function (error) {\n  //     // handle error\n  //     console.log(error);\n  //   });\n\n  const entryData = {\n    data: {\n      main: {\n        humidity: 0,\n        pressure: 0,\n        temp: 0,\n        feels_like: 0\n      },\n      name: '',\n      dt: 0,\n      sys: {\n        sunrise: 0,\n        sunset: 0\n      },\n      weather: [\n        {\n          description: '',\n          // main: 'Clear',\n          icon: '10n'\n        }\n      ],\n      wind: {\n        speed: 0\n      }\n    }\n  };\n\n  const [city, setCity] = useState();\n  const [data, setData] = useState(entryData);\n\n  const getCity = e => {\n    setCity(e.target.value);\n  }\n\n\n  const submitCity = e => {\n    e.preventDefault();\n\n    const getCurrentData = () => {\n      Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl`)\n        .then(function (response) {\n          // handle success\n\n          document.querySelectorAll('.hide').forEach((section) => {\n            section.style.opacity = '0';\n          })\n\n          setTimeout(() => {\n            setData(response);\n          }, 400);\n          document.querySelector('.error-msg').textContent = '';\n          document.querySelector('.input-wrap input').value = '';\n          setCity('');\n\n        })\n        .catch(function (error) {\n          // handle error\n          if (document.querySelector('input').value === '') {\n            document.querySelector('.error-msg').textContent = 'Musisz coś wpisać!'\n            return\n          } else {\n            document.querySelector('.error-msg').textContent = 'Wpisz poprawną nazwę miasta!'\n            console.log(error);\n          };\n        });\n    };\n\n    // const getForecastData = () => {\n    //   Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl`)\n    //     .then(function (response) {\n    //       // handle success\n\n    //       document.querySelectorAll('.hide').forEach((section) => {\n    //         section.style.opacity = '0';\n    //       })\n\n    //       setTimeout(() => {\n    //         setData(response);\n    //       }, 400);\n    //       document.querySelector('.error-msg').textContent = '';\n    //       document.querySelector('.input-wrap input').value = '';\n    //       setCity('');\n\n    //     })\n    //     .catch(function (error) {\n    //       // handle error\n    //       if (document.querySelector('input').value === '') {\n    //         document.querySelector('.error-msg').textContent = 'Musisz coś wpisać!'\n    //         return\n    //       } else {\n    //         document.querySelector('.error-msg').textContent = 'Wpisz poprawną nazwę miasta!'\n    //         console.log(error);\n    //       };\n    //     });\n    // }\n\n    getCurrentData();\n  };\n\n  useEffect(() => {\n\n    const test = () => {\n\n      if (data.data.name !== '') {\n        const sectionsToHide = document.querySelectorAll('.hide');\n\n        setTimeout(() => {\n          sectionsToHide.forEach((section) => {\n            section.style.opacity = '1';\n          })\n        }, 150);\n      };\n    };\n\n    test();\n\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Weather app in</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Input cityName={getCity} checkForm={submitCity} />\n      <Current currentData={data} />\n      <Forecast forecastData={data} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}