{"version":3,"sources":["logo.svg","Input.js","countriesPL.js","Icons.js","Current.js","Day.js","Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","className","onSubmit","checkForm","type","name","placeholder","onChange","cityName","countriesPL","AF","AX","AL","DZ","AS","AD","AI","AQ","AO","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","WE","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","JA","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MK","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","Icons","icon","iconInfo","iconsList","key","hasOwnProperty","customIcon","Current","undefined","currentData","timezone","string","data","description","weather","city","temp","main","toFixed","humidity","pressure","feelsLike","feels_like","wind","speed","sunrise","sys","sunset","country","formatTime","daytime","Date","toISOString","replace","slice","countryFullName","a","dt","day","getDay","month","getMonth","getDate","currentDate","charAt","toUpperCase","Day","forecastData","modTimezone","min","Math","round","max","x","date","Forecast","timezone_offset","days","daily","App","useState","setCity","coord","lon","lat","setData","forecast","setForecast","useEffect","delay","componentsToShow","document","querySelectorAll","forEach","component","style","display","setTimeout","opacity","showContent","Axios","get","then","resp","src","logo","alt","e","target","value","preventDefault","tagName","response","section","querySelector","textContent","catch","error","console","log","getCurrentData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fd791235.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const Input = props => {\r\n    return (\r\n        <section className=\"city-input\">\r\n            {/* <button className=\"wi wi-tornado\" onClick={props.checkForm}>Wylosuj!</button> */}\r\n            <form onSubmit={props.checkForm}>\r\n                <div className='input-wrap'>\r\n                    <input type=\"text\" name=\"name\" placeholder='Wpisz nazwę miasta!' onChange={props.cityName} />\r\n                    <button type=\"submit\" className=\"wi wi-meteor\"></button>\r\n                </div>\r\n                <p className='error-msg'></p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Input;","const countriesPL = {\r\n    AF: 'Afganistan',\r\n    AX: 'Wyspy Alandzkie',\r\n    AL: 'Albania',\r\n    DZ: 'Algeria',\r\n    AS: 'Samoa Amerykańskie',\r\n    AD: 'Andora',\r\n    AI: 'Anguilla',\r\n    AQ: 'Antarktyda',\r\n    AO: 'Angola',\r\n    AG: 'Antigua i Barbuda',\r\n    AR: 'Argentyna',\r\n    AM: 'Armenia',\r\n    AW: 'Aruba',\r\n    AU: 'Australia',\r\n    AT: 'Austria',\r\n    AZ: 'Azerbejdżan',\r\n    BS: 'Bahamy',\r\n    BH: 'Bahrajn',\r\n    BD: 'Bangladesz',\r\n    BB: 'Barbados',\r\n    BY: 'Białoruś',\r\n    BE: 'Belgia',\r\n    BZ: 'Belize',\r\n    BJ: 'Benin',\r\n    BM: 'Bermudy',\r\n    BT: 'Bhutan',\r\n    BO: 'Boliwia',\r\n    BQ: 'Sint Eustatius',\r\n    BA: 'Bośnia i Hercegowina',\r\n    BW: 'Botswana',\r\n    BV: 'Wyspa Bouveta',\r\n    BR: 'Brazylia',\r\n    IO: 'Bryt. Ter. Oceanu Indyjskiego',\r\n    BN: 'Brunei',\r\n    BG: 'Bułgaria',\r\n    BF: 'Burkina Faso',\r\n    BI: 'Burundi',\r\n    CV: 'Cabo Verde',\r\n    KH: 'Kambodża',\r\n    CM: 'Kamerun',\r\n    CA: 'Kanada',\r\n    KY: 'Kajmany',\r\n    CF: 'Republika Środkowoafrykańska',\r\n    TD: 'Czad',\r\n    CL: 'Chile',\r\n    CN: 'Chiny',\r\n    CX: 'Wyspa Bożego Narodzenia',\r\n    CC: 'Wyspy Kokosowe (Keelinga)',\r\n    CO: 'Kolumbia',\r\n    KM: 'Komory',\r\n    CG: 'Kongo',\r\n    CD: 'Demokratyczna Republika Konga',\r\n    CK: 'Wyspy Cooka',\r\n    CR: 'Kostaryka',\r\n    CI: 'Wybrzeże Kości Słoniowej',\r\n    HR: 'Chorwacja',\r\n    CU: 'Kuba',\r\n    CW: 'Curaçao',\r\n    CY: 'Cypr',\r\n    CZ: 'Czechy',\r\n    DK: 'Dania',\r\n    DJ: 'Dżibuti',\r\n    DM: 'Dominika',\r\n    DO: 'Republika Dominikany',\r\n    WE: 'Ekwador',\r\n    EG: 'Egipt',\r\n    SV: 'Salwador',\r\n    GQ: 'Gwinea Równikowa',\r\n    ER: 'Erytrea',\r\n    EE: 'Estonia',\r\n    SZ: 'Eswatini',\r\n    ET: 'Etiopia',\r\n    FK: 'Falklandy',\r\n    FO: 'Wyspy Owcze',\r\n    FJ: 'Fidżi',\r\n    FI: \"Finlandia\",\r\n    FR: 'Francja',\r\n    GF: 'Gujana Francuska',\r\n    PF: 'Polinezja Francuska',\r\n    TF: 'Francuskie Terytoria Południowe',\r\n    GA: 'Gabon',\r\n    GM: 'Gambia',\r\n    GE: 'Gruzja',\r\n    DE: 'Niemcy',\r\n    GH: 'Ghana',\r\n    GI: 'Gibraltar',\r\n    GR: 'Grecja',\r\n    GL: 'Grenlandia',\r\n    GD: 'Grenada',\r\n    GP: 'Gwadelupa',\r\n    GU: 'Guam',\r\n    GT: 'Gwatemala',\r\n    GG: 'Guernsey',\r\n    GN: 'Gwinea',\r\n    GW: 'Gwinea Bissau',\r\n    GY: 'Gujana',\r\n    HT: 'Haiti',\r\n    HM: 'Wyspy Heard i McDonalda',\r\n    VA: 'Stolica Apostolska',\r\n    HN: 'Honduras',\r\n    HK: 'Hongkong',\r\n    HU: 'Węgry',\r\n    IS: 'Islandia',\r\n    IN: 'Indie',\r\n    ID: 'Indonezja',\r\n    IR: 'Iran',\r\n    IQ: 'Irak',\r\n    IE: 'Irlandia',\r\n    IM: 'Wyspa Man',\r\n    IL: 'Izrael',\r\n    IT: 'Włochy',\r\n    JM: 'Jamajka',\r\n    JP: 'Japonia',\r\n    JE: 'Jersey',\r\n    JO: 'Jordan',\r\n    KZ: 'Kazachstan',\r\n    KE: 'Kenia',\r\n    KI: 'Kiribati',\r\n    KP: 'Korea Północna',\r\n    KR: 'Korea Południowa',\r\n    KW: 'Kuwejt',\r\n    KG: 'Kirgistan',\r\n    LA: 'Laos',\r\n    LV: 'Łotwa',\r\n    LB: 'Liban',\r\n    LS: 'Lesotho',\r\n    LR: 'Liberia',\r\n    LY: 'Libia',\r\n    LI: 'Liechtenstein',\r\n    LT: 'Litwa',\r\n    LU: 'Luksemburg',\r\n    MO: 'Macao',\r\n    MG: 'Madagaskar',\r\n    MW: 'Malawi',\r\n    MY: 'Malezja',\r\n    MV: 'Malediwy',\r\n    ML: 'Mali',\r\n    MT: 'Malta',\r\n    MH: 'Wyspy Marshalla',\r\n    MQ: 'Martinique',\r\n    MR: 'Mauretania',\r\n    MU: 'Mauritius',\r\n    YT: 'Majotta',\r\n    MX: 'Meksyk',\r\n    FM: 'Mikronezja',\r\n    MD: 'Mołdawia',\r\n    MC: 'Monako',\r\n    MN: 'Mongolia',\r\n    JA: 'Czarnogóra',\r\n    MS: 'Montserrat',\r\n    MA: 'Maroko',\r\n    MZ: 'Mozambik',\r\n    MM: 'Myanmar',\r\n    NA: 'Namibia',\r\n    NR: 'Nauru',\r\n    NP: 'Nepal',\r\n    NL: 'Holandia',\r\n    NC: 'Nowa Kaledonia',\r\n    NZ: 'Nowa Zelandia',\r\n    NI: 'Nikaragua',\r\n    NE: 'Niger',\r\n    NG: 'Nigeria',\r\n    NU: 'Niue',\r\n    NF: 'Wyspa Norfolk',\r\n    MK: 'Macedonia Północna',\r\n    MP: 'Mariany Północne',\r\n    NO: 'Norwegia',\r\n    OM: 'Oman',\r\n    PK: 'Pakistan',\r\n    PW: 'Palau',\r\n    PS: 'Palestyna, stan',\r\n    PA: 'Panama',\r\n    PG: 'Papua-Nowa Gwinea',\r\n    PY: 'Paragwaj',\r\n    PE: 'Peru',\r\n    PH: 'Filipiny',\r\n    PN: 'Pitcairn',\r\n    PL: 'Polska',\r\n    PT: 'Portugalia',\r\n    PR: 'Puerto Rico',\r\n    QA: 'Katar',\r\n    RE: 'Réunion',\r\n    RO: 'Rumunia',\r\n    RU: 'Rosja',\r\n    RW: 'Rwanda',\r\n    BL: 'Saint Barthélemy',\r\n    SH: 'Wyspa Świętej Heleny',\r\n    KN: 'Saint Kitts and Nevis',\r\n    LC: 'Saint Lucia',\r\n    MF: 'Saint Martin',\r\n    PM: 'Saint Pierre',\r\n    VC: 'Grenadyny',\r\n    WS: 'Samoa',\r\n    SM: 'San Marino',\r\n    ST: 'Wyspy Świętego Tomasza',\r\n    SA: 'Arabia Saudyjska',\r\n    SN: 'Senegal',\r\n    RS: 'Serbia',\r\n    SC: 'Seszele',\r\n    SL: 'Sierra Leone',\r\n    SG: 'Singapur',\r\n    SX: 'Sint Maarten',\r\n    SK: 'Słowacja',\r\n    SI: 'Słowenia',\r\n    SB: 'Wyspy Salomona',\r\n    SO: 'Somalia',\r\n    ZA: 'Republika Południowej Afryki',\r\n    GS: 'Georgia',\r\n    SS: 'Sudan Południowy',\r\n    ES: 'Hiszpania',\r\n    LK: 'Sri Lanka',\r\n    SD: 'Sudan',\r\n    SR: 'Surinam',\r\n    SJ: 'Svalbard i Jan Mayen',\r\n    SE: 'Szwecja',\r\n    CH: 'Szwajcaria',\r\n    SY: 'Syryjska Republika Arabska',\r\n    TW: 'Tajwan',\r\n    TJ: 'Tadżykistan',\r\n    TZ: 'Tanzania',\r\n    TH: 'Tajlandia',\r\n    TL: 'Timor Wschodni',\r\n    TG: 'Togo',\r\n    TK: 'Tokelau',\r\n    TO: 'Tonga',\r\n    TT: 'Trynidad i Tobago',\r\n    TN: 'Tunezja',\r\n    TR: 'Turcja',\r\n    TM: 'Turkmenistan',\r\n    TC: 'Wyspy Turks i Caicos',\r\n    TV: 'Tuvalu',\r\n    UG: 'Uganda',\r\n    UA: 'Ukraina',\r\n    AE: 'Zjednoczone Emiraty Arabskie',\r\n    GB: 'Wielka Brytania',\r\n    US: 'Stany Zjednoczone Ameryki',\r\n    UM: 'Dalekie Wyspy Mniejsze USA',\r\n    UY: 'Urugwaj',\r\n    UZ: 'Uzbekistan',\r\n    VU: 'Vanuatu',\r\n    VE: 'Wenezuela',\r\n    VN: 'Wietnam',\r\n    VG: 'Wyspy Dziewicze (Brytyjskie)',\r\n    VI: 'Wyspy Dziewicze (USA)',\r\n    WF: 'Wallis i Futuna',\r\n    EH: 'Sahara Zachodnia',\r\n    YE: 'Jemen',\r\n    ZM: 'Zambia',\r\n    ZW: 'Zimbabwe',\r\n}\r\n\r\nexport default countriesPL;","const Icons = props => {\r\n    const icon = props.iconInfo;\r\n\r\n    const iconsList = {\r\n        '01d': 'wi-day-sunny',\r\n        '02d': 'wi-day-cloudy',\r\n        '03d': 'wi-cloud',\r\n        '04d': 'wi-cloud',\r\n        '09d': 'wi-day-rain',\r\n        '10d': 'wi-day-rain-wind',\r\n        '11d': 'wi-day-thunderstorm',\r\n        '13d': 'wi-day-snow',\r\n        '50d': 'wi-day-fog',\r\n        '01n': 'wi-moon-new',\r\n        '02n': 'wi-night-partly-cloudy',\r\n        '03n': 'wi-night-cloudy',\r\n        '04n': 'wi-cloudy',\r\n        '09n': 'wi-night-rain',\r\n        '10n': 'wi-night-showers',\r\n        '11n': 'wi-night-storm-showers',\r\n        '13n': 'wi-night-snow',\r\n        '50n': 'wi-night-fog',\r\n    }\r\n\r\n    const customIcon = () => {\r\n        for (const key in iconsList) {\r\n            if (iconsList.hasOwnProperty(key)) {\r\n                if (icon === key) {\r\n                    return 'wi ' + iconsList[key];\r\n                }\r\n            };\r\n        };\r\n    };\r\n\r\n    return <i className={customIcon()}></i>\r\n};\r\n\r\nexport default Icons;","import countriesPL from './countriesPL'\r\nimport Icons from './Icons'\r\n\r\nconst Current = props => {\r\n\r\n    //checks if theres actual data, its not in the beginning \r\n    if (props.currentData.timezone === undefined) {\r\n        return <></>\r\n    };\r\n\r\n    const data = props.currentData;\r\n    const description = data.weather[0].description\r\n    const city = data.name;\r\n    const temp = data.main.temp.toFixed();\r\n    const humidity = data.main.humidity;\r\n    const pressure = data.main.pressure;\r\n    const feelsLike = data.main.feels_like.toFixed();\r\n    const wind = (data.wind.speed * 3.6).toFixed(1);\r\n    const sunrise = data.sys.sunrise;\r\n    const sunset = data.sys.sunset;\r\n    const icon = data.weather[0].icon;\r\n    const country = data.sys.country;\r\n\r\n    const countryFullName = () => {\r\n        for (const key in countriesPL) {\r\n            if (countriesPL.hasOwnProperty(key)) {\r\n                if (country === key) {\r\n                    return countriesPL[key];\r\n                }\r\n            };\r\n        };\r\n    };\r\n\r\n    const formatTime = daytime => {\r\n        const time = new Date((daytime * 1000) + (data.timezone * 1000)).toISOString().replace(/T/, ' ').replace(/\\..+/, '').slice(11, -3);\r\n\r\n        return time;\r\n    };\r\n\r\n    const currentDate = () => {\r\n        const a = new Date((data.dt * 1000) + (data.timezone * 1000));\r\n        const days = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota']\r\n\r\n        const months = ['Stycznia', 'Lutego', 'Marca', 'Kwietnia', 'Maja', 'Czerwca', 'Lipca', 'Sierpnia', 'Września', 'Października', 'Listopada', 'Grudnia'];\r\n\r\n        const day = days[a.getDay()];\r\n        const month = months[a.getMonth()];\r\n        const time = `${day} ${a.getDate()} ${month}`;\r\n        return time;\r\n    };\r\n\r\n    const capitalizeFirstLetter = string => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    return (\r\n        <section className=\"current-forecast hide\">\r\n            <div className=\"city\">\r\n                <h2>{city}, <span>{countryFullName()}</span></h2>\r\n                <p>{currentDate()}</p>\r\n            </div>\r\n            <div className=\"current-temp\">\r\n                <Icons iconInfo={icon} />\r\n                <div className=\"info\">\r\n                    <h2>{temp}°C</h2>\r\n                    <p>{capitalizeFirstLetter(description)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"current-others\">\r\n                <div className=\"rain\">\r\n                    <h3>{feelsLike}°C</h3>\r\n                    <p>Odczuwalna temperatura</p>\r\n                </div>\r\n                <div className=\"wind\">\r\n                    <h3>{wind}km/h</h3>\r\n                    <p>Prędkość wiatru</p>\r\n                </div>\r\n                <div className=\"sunrise\">\r\n                    <h3>{formatTime(sunrise)}</h3>\r\n                    <p>Wschód</p>\r\n                </div>\r\n                <div className=\"pressure\">\r\n                    <h3>{pressure}hPa</h3>\r\n                    <p>Ciśnienie</p>\r\n                </div>\r\n                <div className=\"humidity\">\r\n                    <h3>{humidity}%</h3>\r\n                    <p>Wilgotność</p>\r\n                </div>\r\n                <div className=\"sunset\">\r\n                    <h3>{formatTime(sunset)}</h3>\r\n                    <p>Zachód</p>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Current;","import Icons from './Icons'\r\n\r\nconst Day = props => {\r\n\r\n    //checks if theres actual data, its not in the beginning \r\n    if (props.forecastData === undefined) {\r\n        return <></>\r\n    };\r\n\r\n    const data = props.forecastData;\r\n    const timezone = props.modTimezone;\r\n    const day = data.dt\r\n    const min = Math.round(data.temp.min);\r\n    const max = Math.round(data.temp.max);\r\n    const icon = data.weather[0].icon;\r\n\r\n    const date = x => {\r\n        const a = new Date((x * 1000) + (timezone * 1000));\r\n        const days = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota']\r\n\r\n        const day = days[a.getDay()];\r\n        const time = `${day}`;\r\n        return time;\r\n    };\r\n\r\n    return (\r\n        <div className='day hide display'>\r\n            <h4>\r\n                {date(day)}\r\n            </h4>\r\n            <Icons iconInfo={icon} />\r\n            <p><span>{max}°C</span> <span>{min}°C</span></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Day;","import Day from './Day'\r\nconst Forecast = props => {\r\n\r\n    if (props.forecastData === undefined) {\r\n        return <></>\r\n    };\r\n\r\n    const data = props.forecastData;\r\n    const timezone = data.timezone_offset;\r\n    const days = data.daily;\r\n\r\n    return (\r\n        <section className=\"forecast\">\r\n            <Day forecastData={days[1]} modTimezone={timezone} />\r\n            <Day forecastData={days[2]} modTimezone={timezone} />\r\n            <Day forecastData={days[3]} modTimezone={timezone} />\r\n            <Day forecastData={days[4]} modTimezone={timezone} />\r\n            <Day forecastData={days[5]} modTimezone={timezone} />\r\n            <Day forecastData={days[6]} modTimezone={timezone} />\r\n            <Day forecastData={days[7]} modTimezone={timezone} />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Forecast;","import logo from './logo.svg';\r\nimport { React, useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport Input from './Input'\r\nimport Current from './Current.js'\r\nimport Forecast from './Forecast';\r\n\r\nimport './css/weather-icons.min.css'\r\nimport './css/App.css';\r\nimport './css/Icons.css';\r\nimport './css/Input.css';\r\nimport './css/Current.css'\r\nimport './css/Forecast.css';\r\nimport './css/Rwd.css'\r\n\r\nconst App = () => {\r\n  const entryData = {\r\n    coord: {\r\n      lon: 69,\r\n      lat: 0\r\n    }\r\n  };\r\n\r\n  const [city, setCity] = useState();\r\n  const [data, setData] = useState(entryData);\r\n  const [forecast, setForecast] = useState();\r\n\r\n  const getCity = e => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const getForecastData = (lat, lon) => {\r\n    Axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,current,minutely,alerts&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl  `)\r\n      .then(function (resp) {\r\n        // handle success\r\n        setForecast(resp.data);\r\n      })\r\n  };\r\n\r\n  const getCurrentData = (city) => {\r\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl`)\r\n      .then(function (response) {\r\n        // handle success\r\n        document.querySelectorAll('.hide').forEach((section) => {\r\n          section.style.opacity = '0';\r\n        })\r\n\r\n        setTimeout(() => {\r\n          setData(response.data);\r\n        }, 400);\r\n\r\n        document.querySelector('.error-msg').textContent = '';\r\n        document.querySelector('.input-wrap input').value = '';\r\n        setCity('');\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        if (document.querySelector('input').value === '') {\r\n          document.querySelector('.error-msg').textContent = 'Musisz coś wpisać!'\r\n          return\r\n        } else {\r\n          document.querySelector('.error-msg').textContent = 'Wpisz poprawną nazwę miasta!'\r\n          console.log(error);\r\n        };\r\n      });\r\n  };\r\n\r\n  const submitCity = e => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.tagName === 'FORM') {\r\n      getCurrentData(city);\r\n    }\r\n\r\n    // ogarnąć cityId z OWM, potem generować je losowo\r\n    // else {\r\n    //   const randomCityGenerator = () => {\r\n\r\n    //     const country = 'pl';\r\n    //     if (country !== undefined) {\r\n    //       console.log(country.toUpperCase())\r\n    //     } else {\r\n    //       console.log('Spróbuj jeszcze raz :(')\r\n\r\n    //     }\r\n    //   }\r\n\r\n    //   randomCityGenerator();\r\n    //   getCurrentData('krakow');\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const showContent = (delay) => {\r\n      if (data.name !== '') {\r\n        const componentsToShow = document.querySelectorAll('.hide');\r\n        const componentsToDisplay = document.querySelectorAll('.display');\r\n\r\n        componentsToDisplay.forEach((component) => {\r\n          component.style.display = 'block';\r\n        });\r\n\r\n        setTimeout(() => {\r\n          componentsToShow.forEach((component) => {\r\n            component.style.opacity = '1';\r\n          });\r\n\r\n        }, delay);\r\n      };\r\n    };\r\n    showContent(150);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    getForecastData(data.coord.lat, data.coord.lon);\r\n\r\n  }, [data.coord.lat, data.coord.lon])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"fixed-bg\"></div>\r\n      <header className=\"App-header\">\r\n        <h1>Weather app in</h1>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      </header>\r\n      <Input cityName={getCity} checkForm={submitCity} />\r\n      <Current currentData={data} />\r\n      <Forecast forecastData={forecast} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}